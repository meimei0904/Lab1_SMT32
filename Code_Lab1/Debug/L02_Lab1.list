
L02_Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dcc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001ed8  08001ed8  00011ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001efc  08001efc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001efc  08001efc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001efc  08001efc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001efc  08001efc  00011efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f00  08001f00  00011f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001f10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001f10  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000330a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fad  00000000  00000000  0002333f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000420  00000000  00000000  000242f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000388  00000000  00000000  00024710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015823  00000000  00000000  00024a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000050a1  00000000  00000000  0003a2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079cd1  00000000  00000000  0003f35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b902d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e2c  00000000  00000000  000b9080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ec0 	.word	0x08001ec0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001ec0 	.word	0x08001ec0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 ffb1 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f9f1 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa2b 	bl	80005b4 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  clearP0A();
 800015e:	f000 fae5 	bl	800072c <clearP0A>
  clearP0B();
 8000162:	f000 faef 	bl	8000744 <clearP0B>
  clearSegdu();
 8000166:	f000 faf9 	bl	800075c <clearSegdu>
  int count = 0;
 800016a:	2300      	movs	r3, #0
 800016c:	607b      	str	r3, [r7, #4]
  int state = 0;
 800016e:	2300      	movs	r3, #0
 8000170:	603b      	str	r3, [r7, #0]
  while (1)
  {
	 count ++;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	3301      	adds	r3, #1
 8000176:	607b      	str	r3, [r7, #4]
 8000178:	683b      	ldr	r3, [r7, #0]
 800017a:	2b13      	cmp	r3, #19
 800017c:	f200 81d9 	bhi.w	8000532 <main+0x3e6>
 8000180:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <main+0x3c>)
 8000182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000186:	bf00      	nop
 8000188:	080001d9 	.word	0x080001d9
 800018c:	08000227 	.word	0x08000227
 8000190:	0800025d 	.word	0x0800025d
 8000194:	0800027b 	.word	0x0800027b
 8000198:	08000299 	.word	0x08000299
 800019c:	080002b7 	.word	0x080002b7
 80001a0:	080002d5 	.word	0x080002d5
 80001a4:	08000317 	.word	0x08000317
 80001a8:	08000335 	.word	0x08000335
 80001ac:	08000353 	.word	0x08000353
 80001b0:	08000371 	.word	0x08000371
 80001b4:	080003bf 	.word	0x080003bf
 80001b8:	080003dd 	.word	0x080003dd
 80001bc:	080003fb 	.word	0x080003fb
 80001c0:	08000419 	.word	0x08000419
 80001c4:	08000435 	.word	0x08000435
 80001c8:	08000451 	.word	0x08000451
 80001cc:	08000491 	.word	0x08000491
 80001d0:	080004ad 	.word	0x080004ad
 80001d4:	080004c9 	.word	0x080004c9
	 switch(state)
	 {
	 	 case 0:
	 		 if(count == 1)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	f040 8182 	bne.w	80004e4 <main+0x398>
	  		 {
	 			 setLed(3); setLed(9); setLed(4); setLed(10);
 80001e0:	2003      	movs	r0, #3
 80001e2:	f000 fad9 	bl	8000798 <setLed>
 80001e6:	2009      	movs	r0, #9
 80001e8:	f000 fad6 	bl	8000798 <setLed>
 80001ec:	2004      	movs	r0, #4
 80001ee:	f000 fad3 	bl	8000798 <setLed>
 80001f2:	200a      	movs	r0, #10
 80001f4:	f000 fad0 	bl	8000798 <setLed>
	 			 clearLed(1); clearLed(7); clearLed(5); clearLed(11);
 80001f8:	2001      	movs	r0, #1
 80001fa:	f000 fb3b 	bl	8000874 <clearLed>
 80001fe:	2007      	movs	r0, #7
 8000200:	f000 fb38 	bl	8000874 <clearLed>
 8000204:	2005      	movs	r0, #5
 8000206:	f000 fb35 	bl	8000874 <clearLed>
 800020a:	200b      	movs	r0, #11
 800020c:	f000 fb32 	bl	8000874 <clearLed>
	 			 numSeg1(5);
 8000210:	2005      	movs	r0, #5
 8000212:	f000 fb9d 	bl	8000950 <numSeg1>
	 			 numSeg2(9);
 8000216:	2009      	movs	r0, #9
 8000218:	f000 fd60 	bl	8000cdc <numSeg2>
	 			 count = 0;
 800021c:	2300      	movs	r3, #0
 800021e:	607b      	str	r3, [r7, #4]
	 			 state = 1;
 8000220:	2301      	movs	r3, #1
 8000222:	603b      	str	r3, [r7, #0]
	  		 }
	 	 break;
 8000224:	e15e      	b.n	80004e4 <main+0x398>

	 	 case 1:
	 		 if(count == 1)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2b01      	cmp	r3, #1
 800022a:	f040 815d 	bne.w	80004e8 <main+0x39c>
	  		 {
	 			 setLed(3); setLed(9); setLed(4); setLed(10);
 800022e:	2003      	movs	r0, #3
 8000230:	f000 fab2 	bl	8000798 <setLed>
 8000234:	2009      	movs	r0, #9
 8000236:	f000 faaf 	bl	8000798 <setLed>
 800023a:	2004      	movs	r0, #4
 800023c:	f000 faac 	bl	8000798 <setLed>
 8000240:	200a      	movs	r0, #10
 8000242:	f000 faa9 	bl	8000798 <setLed>
	 			 numSeg1(4);
 8000246:	2004      	movs	r0, #4
 8000248:	f000 fb82 	bl	8000950 <numSeg1>
	 			 numSeg2(8);
 800024c:	2008      	movs	r0, #8
 800024e:	f000 fd45 	bl	8000cdc <numSeg2>
	  			 count = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	607b      	str	r3, [r7, #4]
	  			 state = 2;
 8000256:	2302      	movs	r3, #2
 8000258:	603b      	str	r3, [r7, #0]
	  		 }
	 	 break;
 800025a:	e145      	b.n	80004e8 <main+0x39c>

	  	 case 2:
	  		 if(count == 1)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b01      	cmp	r3, #1
 8000260:	f040 8144 	bne.w	80004ec <main+0x3a0>
	  		 {
	 			 numSeg1(3);
 8000264:	2003      	movs	r0, #3
 8000266:	f000 fb73 	bl	8000950 <numSeg1>
	 			 numSeg2(7);
 800026a:	2007      	movs	r0, #7
 800026c:	f000 fd36 	bl	8000cdc <numSeg2>
	  			 count = 0;
 8000270:	2300      	movs	r3, #0
 8000272:	607b      	str	r3, [r7, #4]
	  			 state = 3;
 8000274:	2303      	movs	r3, #3
 8000276:	603b      	str	r3, [r7, #0]
	  		 }
	  	 break;
 8000278:	e138      	b.n	80004ec <main+0x3a0>

	  	 case 3:
	  		 if(count == 1)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2b01      	cmp	r3, #1
 800027e:	f040 8137 	bne.w	80004f0 <main+0x3a4>
	  		 {
	 			 numSeg1(2);
 8000282:	2002      	movs	r0, #2
 8000284:	f000 fb64 	bl	8000950 <numSeg1>
	 			 numSeg2(6);
 8000288:	2006      	movs	r0, #6
 800028a:	f000 fd27 	bl	8000cdc <numSeg2>
	  			 count = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	607b      	str	r3, [r7, #4]
	  			 state = 4;
 8000292:	2304      	movs	r3, #4
 8000294:	603b      	str	r3, [r7, #0]
	  		 }
	  	 break;
 8000296:	e12b      	b.n	80004f0 <main+0x3a4>

	  	 case 4:
	  		 if(count == 1)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b01      	cmp	r3, #1
 800029c:	f040 812a 	bne.w	80004f4 <main+0x3a8>
	  		 {
	 			 numSeg1(1);
 80002a0:	2001      	movs	r0, #1
 80002a2:	f000 fb55 	bl	8000950 <numSeg1>
	 			 numSeg2(5);
 80002a6:	2005      	movs	r0, #5
 80002a8:	f000 fd18 	bl	8000cdc <numSeg2>
	  			 count = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	607b      	str	r3, [r7, #4]
	  			 state = 5;
 80002b0:	2305      	movs	r3, #5
 80002b2:	603b      	str	r3, [r7, #0]
	  		 }
	     break;
 80002b4:	e11e      	b.n	80004f4 <main+0x3a8>

	  	 case 5:
	  		 if(count == 1)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	f040 811d 	bne.w	80004f8 <main+0x3ac>
	  		 {
	 			 numSeg1(0);
 80002be:	2000      	movs	r0, #0
 80002c0:	f000 fb46 	bl	8000950 <numSeg1>
	 			 numSeg2(4);
 80002c4:	2004      	movs	r0, #4
 80002c6:	f000 fd09 	bl	8000cdc <numSeg2>
	  			 count = 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	607b      	str	r3, [r7, #4]
	  			 state = 6;
 80002ce:	2306      	movs	r3, #6
 80002d0:	603b      	str	r3, [r7, #0]
	  		 }
	     break;
 80002d2:	e111      	b.n	80004f8 <main+0x3ac>

	  	 case 6:
	  		 if(count == 1)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	f040 8110 	bne.w	80004fc <main+0x3b0>
	  		 {
	  			 setLed(2); setLed(4); setLed(8); setLed(10);
 80002dc:	2002      	movs	r0, #2
 80002de:	f000 fa5b 	bl	8000798 <setLed>
 80002e2:	2004      	movs	r0, #4
 80002e4:	f000 fa58 	bl	8000798 <setLed>
 80002e8:	2008      	movs	r0, #8
 80002ea:	f000 fa55 	bl	8000798 <setLed>
 80002ee:	200a      	movs	r0, #10
 80002f0:	f000 fa52 	bl	8000798 <setLed>
	  			 clearLed(3); clearLed(9);
 80002f4:	2003      	movs	r0, #3
 80002f6:	f000 fabd 	bl	8000874 <clearLed>
 80002fa:	2009      	movs	r0, #9
 80002fc:	f000 faba 	bl	8000874 <clearLed>
	 			 numSeg1(3);
 8000300:	2003      	movs	r0, #3
 8000302:	f000 fb25 	bl	8000950 <numSeg1>
	 			 numSeg2(3);
 8000306:	2003      	movs	r0, #3
 8000308:	f000 fce8 	bl	8000cdc <numSeg2>
	  			 count = 0;
 800030c:	2300      	movs	r3, #0
 800030e:	607b      	str	r3, [r7, #4]
	  			 state = 7;
 8000310:	2307      	movs	r3, #7
 8000312:	603b      	str	r3, [r7, #0]
	  		 }
	  	 break;
 8000314:	e0f2      	b.n	80004fc <main+0x3b0>

	  	 case 7:
	  		 if(count == 1)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2b01      	cmp	r3, #1
 800031a:	f040 80f1 	bne.w	8000500 <main+0x3b4>
	  		 {
	 			 numSeg1(2);
 800031e:	2002      	movs	r0, #2
 8000320:	f000 fb16 	bl	8000950 <numSeg1>
	 			 numSeg2(2);
 8000324:	2002      	movs	r0, #2
 8000326:	f000 fcd9 	bl	8000cdc <numSeg2>
	  			 count = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	607b      	str	r3, [r7, #4]
	  			 state = 8;
 800032e:	2308      	movs	r3, #8
 8000330:	603b      	str	r3, [r7, #0]
	  		 }
	  	 break;
 8000332:	e0e5      	b.n	8000500 <main+0x3b4>

	  	 case 8:
	  		 if(count == 1)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2b01      	cmp	r3, #1
 8000338:	f040 80e4 	bne.w	8000504 <main+0x3b8>
	  		 {
	 			 numSeg1(1);
 800033c:	2001      	movs	r0, #1
 800033e:	f000 fb07 	bl	8000950 <numSeg1>
	 			 numSeg2(1);
 8000342:	2001      	movs	r0, #1
 8000344:	f000 fcca 	bl	8000cdc <numSeg2>
	  			 count = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	607b      	str	r3, [r7, #4]
	  			 state = 9;
 800034c:	2309      	movs	r3, #9
 800034e:	603b      	str	r3, [r7, #0]
	  		 }
	     break;
 8000350:	e0d8      	b.n	8000504 <main+0x3b8>

	  	 case 9:
	  		 if(count == 1)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2b01      	cmp	r3, #1
 8000356:	f040 80d7 	bne.w	8000508 <main+0x3bc>
	  		 {
	 			 numSeg1(0);
 800035a:	2000      	movs	r0, #0
 800035c:	f000 faf8 	bl	8000950 <numSeg1>
	 			 numSeg2(0);
 8000360:	2000      	movs	r0, #0
 8000362:	f000 fcbb 	bl	8000cdc <numSeg2>
	  			 count = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	607b      	str	r3, [r7, #4]
	  			 state = 10;
 800036a:	230a      	movs	r3, #10
 800036c:	603b      	str	r3, [r7, #0]
	  		 }
	     break;
 800036e:	e0cb      	b.n	8000508 <main+0x3bc>

	  	 case 10:
	  		 if(count == 1)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2b01      	cmp	r3, #1
 8000374:	f040 80ca 	bne.w	800050c <main+0x3c0>
	  		 {
	  			 setLed(1); setLed(7); setLed(6); setLed(12);
 8000378:	2001      	movs	r0, #1
 800037a:	f000 fa0d 	bl	8000798 <setLed>
 800037e:	2007      	movs	r0, #7
 8000380:	f000 fa0a 	bl	8000798 <setLed>
 8000384:	2006      	movs	r0, #6
 8000386:	f000 fa07 	bl	8000798 <setLed>
 800038a:	200c      	movs	r0, #12
 800038c:	f000 fa04 	bl	8000798 <setLed>
	  			 clearLed(2); clearLed(4); clearLed(8); clearLed(10);
 8000390:	2002      	movs	r0, #2
 8000392:	f000 fa6f 	bl	8000874 <clearLed>
 8000396:	2004      	movs	r0, #4
 8000398:	f000 fa6c 	bl	8000874 <clearLed>
 800039c:	2008      	movs	r0, #8
 800039e:	f000 fa69 	bl	8000874 <clearLed>
 80003a2:	200a      	movs	r0, #10
 80003a4:	f000 fa66 	bl	8000874 <clearLed>
	 			 numSeg1(9);
 80003a8:	2009      	movs	r0, #9
 80003aa:	f000 fad1 	bl	8000950 <numSeg1>
	 			 numSeg2(5);
 80003ae:	2005      	movs	r0, #5
 80003b0:	f000 fc94 	bl	8000cdc <numSeg2>
	  			 count = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	607b      	str	r3, [r7, #4]
	  			 state = 11;
 80003b8:	230b      	movs	r3, #11
 80003ba:	603b      	str	r3, [r7, #0]
	  		 }
	     break;
 80003bc:	e0a6      	b.n	800050c <main+0x3c0>

	  	 case 11:
	  		 if(count == 1)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	f040 80a5 	bne.w	8000510 <main+0x3c4>
	  		 {
	 			 numSeg1(8);
 80003c6:	2008      	movs	r0, #8
 80003c8:	f000 fac2 	bl	8000950 <numSeg1>
	 			 numSeg2(4);
 80003cc:	2004      	movs	r0, #4
 80003ce:	f000 fc85 	bl	8000cdc <numSeg2>
	  			 count = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	607b      	str	r3, [r7, #4]
	  			 state = 12;
 80003d6:	230c      	movs	r3, #12
 80003d8:	603b      	str	r3, [r7, #0]
	  		 }
	     break;
 80003da:	e099      	b.n	8000510 <main+0x3c4>

	  	 case 12:
	  		 if(count == 1)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	f040 8098 	bne.w	8000514 <main+0x3c8>
	  		 {
	 			 numSeg1(7);
 80003e4:	2007      	movs	r0, #7
 80003e6:	f000 fab3 	bl	8000950 <numSeg1>
	 			 numSeg2(3);
 80003ea:	2003      	movs	r0, #3
 80003ec:	f000 fc76 	bl	8000cdc <numSeg2>
	  			 count = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	607b      	str	r3, [r7, #4]
	  			 state = 13;
 80003f4:	230d      	movs	r3, #13
 80003f6:	603b      	str	r3, [r7, #0]
	  		 }
	     break;
 80003f8:	e08c      	b.n	8000514 <main+0x3c8>

	  	 case 13:
	  		 if(count == 1)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	f040 808b 	bne.w	8000518 <main+0x3cc>
	  		 {
	 			 numSeg1(6);
 8000402:	2006      	movs	r0, #6
 8000404:	f000 faa4 	bl	8000950 <numSeg1>
	 			 numSeg2(2);
 8000408:	2002      	movs	r0, #2
 800040a:	f000 fc67 	bl	8000cdc <numSeg2>
	  			 count = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	607b      	str	r3, [r7, #4]
	  			 state = 14;
 8000412:	230e      	movs	r3, #14
 8000414:	603b      	str	r3, [r7, #0]
	  		 }
	     break;
 8000416:	e07f      	b.n	8000518 <main+0x3cc>

	  	 case 14:
	  		 if(count == 1)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d17e      	bne.n	800051c <main+0x3d0>
	  		 {
	 			 numSeg1(5);
 800041e:	2005      	movs	r0, #5
 8000420:	f000 fa96 	bl	8000950 <numSeg1>
	 			 numSeg2(1);
 8000424:	2001      	movs	r0, #1
 8000426:	f000 fc59 	bl	8000cdc <numSeg2>
	  			 count = 0;
 800042a:	2300      	movs	r3, #0
 800042c:	607b      	str	r3, [r7, #4]
	  			 state = 15;
 800042e:	230f      	movs	r3, #15
 8000430:	603b      	str	r3, [r7, #0]
	  		 }
	     break;
 8000432:	e073      	b.n	800051c <main+0x3d0>

	  	 case 15:
	  		 if(count == 1)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d172      	bne.n	8000520 <main+0x3d4>
	  		 {
	 			 numSeg1(4);
 800043a:	2004      	movs	r0, #4
 800043c:	f000 fa88 	bl	8000950 <numSeg1>
	 			 numSeg2(0);
 8000440:	2000      	movs	r0, #0
 8000442:	f000 fc4b 	bl	8000cdc <numSeg2>
	  			 count = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	607b      	str	r3, [r7, #4]
	  			 state = 16;
 800044a:	2310      	movs	r3, #16
 800044c:	603b      	str	r3, [r7, #0]
	  		 }
	     break;
 800044e:	e067      	b.n	8000520 <main+0x3d4>

	  	 case 16:
	  		 if(count == 1)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d166      	bne.n	8000524 <main+0x3d8>
	  		 {
	  			 setLed(1); setLed(7); setLed(5); setLed(11);
 8000456:	2001      	movs	r0, #1
 8000458:	f000 f99e 	bl	8000798 <setLed>
 800045c:	2007      	movs	r0, #7
 800045e:	f000 f99b 	bl	8000798 <setLed>
 8000462:	2005      	movs	r0, #5
 8000464:	f000 f998 	bl	8000798 <setLed>
 8000468:	200b      	movs	r0, #11
 800046a:	f000 f995 	bl	8000798 <setLed>
	  			 clearLed(6); clearLed(12);
 800046e:	2006      	movs	r0, #6
 8000470:	f000 fa00 	bl	8000874 <clearLed>
 8000474:	200c      	movs	r0, #12
 8000476:	f000 f9fd 	bl	8000874 <clearLed>
	  			 numSeg1(3);
 800047a:	2003      	movs	r0, #3
 800047c:	f000 fa68 	bl	8000950 <numSeg1>
	 			 numSeg2(3);
 8000480:	2003      	movs	r0, #3
 8000482:	f000 fc2b 	bl	8000cdc <numSeg2>
	  			 count = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	607b      	str	r3, [r7, #4]
	  			 state = 17;
 800048a:	2311      	movs	r3, #17
 800048c:	603b      	str	r3, [r7, #0]
	  		 }
	     break;
 800048e:	e049      	b.n	8000524 <main+0x3d8>

	  	 case 17:
	  		 if(count == 1)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d148      	bne.n	8000528 <main+0x3dc>
	  		 {
	  			 numSeg1(2);
 8000496:	2002      	movs	r0, #2
 8000498:	f000 fa5a 	bl	8000950 <numSeg1>
	 			 numSeg2(2);
 800049c:	2002      	movs	r0, #2
 800049e:	f000 fc1d 	bl	8000cdc <numSeg2>
	  			 count = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	607b      	str	r3, [r7, #4]
	  			 state = 18;
 80004a6:	2312      	movs	r3, #18
 80004a8:	603b      	str	r3, [r7, #0]
	  		 }
	     break;
 80004aa:	e03d      	b.n	8000528 <main+0x3dc>

	  	 case 18:
	  		 if(count == 1)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d13c      	bne.n	800052c <main+0x3e0>
	  		 {
	  			 numSeg1(1);
 80004b2:	2001      	movs	r0, #1
 80004b4:	f000 fa4c 	bl	8000950 <numSeg1>
	 			 numSeg2(1);
 80004b8:	2001      	movs	r0, #1
 80004ba:	f000 fc0f 	bl	8000cdc <numSeg2>
	  			 count = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	607b      	str	r3, [r7, #4]
	  			 state = 19;
 80004c2:	2313      	movs	r3, #19
 80004c4:	603b      	str	r3, [r7, #0]
	  		 }
	     break;
 80004c6:	e031      	b.n	800052c <main+0x3e0>

	  	 case 19:
	  		 if(count == 1)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d130      	bne.n	8000530 <main+0x3e4>
	  		 {
	  			 numSeg1(0);
 80004ce:	2000      	movs	r0, #0
 80004d0:	f000 fa3e 	bl	8000950 <numSeg1>
	 			 numSeg2(0);
 80004d4:	2000      	movs	r0, #0
 80004d6:	f000 fc01 	bl	8000cdc <numSeg2>
	  			 count = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
	  			 state = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	603b      	str	r3, [r7, #0]
	  		 }
	     break;
 80004e2:	e025      	b.n	8000530 <main+0x3e4>
	 	 break;
 80004e4:	bf00      	nop
 80004e6:	e024      	b.n	8000532 <main+0x3e6>
	 	 break;
 80004e8:	bf00      	nop
 80004ea:	e022      	b.n	8000532 <main+0x3e6>
	  	 break;
 80004ec:	bf00      	nop
 80004ee:	e020      	b.n	8000532 <main+0x3e6>
	  	 break;
 80004f0:	bf00      	nop
 80004f2:	e01e      	b.n	8000532 <main+0x3e6>
	     break;
 80004f4:	bf00      	nop
 80004f6:	e01c      	b.n	8000532 <main+0x3e6>
	     break;
 80004f8:	bf00      	nop
 80004fa:	e01a      	b.n	8000532 <main+0x3e6>
	  	 break;
 80004fc:	bf00      	nop
 80004fe:	e018      	b.n	8000532 <main+0x3e6>
	  	 break;
 8000500:	bf00      	nop
 8000502:	e016      	b.n	8000532 <main+0x3e6>
	     break;
 8000504:	bf00      	nop
 8000506:	e014      	b.n	8000532 <main+0x3e6>
	     break;
 8000508:	bf00      	nop
 800050a:	e012      	b.n	8000532 <main+0x3e6>
	     break;
 800050c:	bf00      	nop
 800050e:	e010      	b.n	8000532 <main+0x3e6>
	     break;
 8000510:	bf00      	nop
 8000512:	e00e      	b.n	8000532 <main+0x3e6>
	     break;
 8000514:	bf00      	nop
 8000516:	e00c      	b.n	8000532 <main+0x3e6>
	     break;
 8000518:	bf00      	nop
 800051a:	e00a      	b.n	8000532 <main+0x3e6>
	     break;
 800051c:	bf00      	nop
 800051e:	e008      	b.n	8000532 <main+0x3e6>
	     break;
 8000520:	bf00      	nop
 8000522:	e006      	b.n	8000532 <main+0x3e6>
	     break;
 8000524:	bf00      	nop
 8000526:	e004      	b.n	8000532 <main+0x3e6>
	     break;
 8000528:	bf00      	nop
 800052a:	e002      	b.n	8000532 <main+0x3e6>
	     break;
 800052c:	bf00      	nop
 800052e:	e000      	b.n	8000532 <main+0x3e6>
	     break;
 8000530:	bf00      	nop
	  }
	  HAL_Delay(1000);
 8000532:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000536:	f000 fe21 	bl	800117c <HAL_Delay>
	 count ++;
 800053a:	e61a      	b.n	8000172 <main+0x26>

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b090      	sub	sp, #64	; 0x40
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0318 	add.w	r3, r7, #24
 8000546:	2228      	movs	r2, #40	; 0x28
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f001 fcb0 	bl	8001eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055e:	2302      	movs	r3, #2
 8000560:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000562:	2301      	movs	r3, #1
 8000564:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000566:	2310      	movs	r3, #16
 8000568:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056a:	2300      	movs	r3, #0
 800056c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0318 	add.w	r3, r7, #24
 8000572:	4618      	mov	r0, r3
 8000574:	f001 f89c 	bl	80016b0 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800057e:	f000 f86f 	bl	8000660 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fb08 	bl	8001bb0 <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005a6:	f000 f85b 	bl	8000660 <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	3740      	adds	r7, #64	; 0x40
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <MX_GPIO_Init+0xa0>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <MX_GPIO_Init+0xa0>)
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <MX_GPIO_Init+0xa0>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0304 	and.w	r3, r3, #4
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <MX_GPIO_Init+0xa0>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <MX_GPIO_Init+0xa0>)
 80005e6:	f043 0308 	orr.w	r3, r3, #8
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_GPIO_Init+0xa0>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0308 	and.w	r3, r3, #8
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_00_Pin|SEG_0_Pin|SEG_1_Pin|SEG_2_Pin
 80005f8:	2200      	movs	r2, #0
 80005fa:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 80005fe:	4816      	ldr	r0, [pc, #88]	; (8000658 <MX_GPIO_Init+0xa4>)
 8000600:	f001 f83e 	bl	8001680 <HAL_GPIO_WritePin>
                          |SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|SEG_6_Pin
                          |SEG_11_Pin|SEG_22_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_11_Pin
 8000604:	2200      	movs	r2, #0
 8000606:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800060a:	4814      	ldr	r0, [pc, #80]	; (800065c <MX_GPIO_Init+0xa8>)
 800060c:	f001 f838 	bl	8001680 <HAL_GPIO_WritePin>
                          |LED_7_Pin|LED_8_Pin|LED_9_Pin|LED_10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_00_Pin SEG_0_Pin SEG_1_Pin SEG_2_Pin
                           SEG_3_Pin SEG_4_Pin SEG_5_Pin SEG_6_Pin
                           SEG_11_Pin SEG_22_Pin */
  GPIO_InitStruct.Pin = SEG_00_Pin|SEG_0_Pin|SEG_1_Pin|SEG_2_Pin
 8000610:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000614:	60bb      	str	r3, [r7, #8]
                          |SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|SEG_6_Pin
                          |SEG_11_Pin|SEG_22_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2302      	movs	r3, #2
 8000620:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	4619      	mov	r1, r3
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <MX_GPIO_Init+0xa4>)
 800062a:	f000 feaf 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_11_Pin
                           LED_12_Pin SEG_33_Pin SEG_44_Pin SEG_55_Pin
                           SEG_66_Pin LED_4_Pin LED_5_Pin LED_6_Pin
                           LED_7_Pin LED_8_Pin LED_9_Pin LED_10_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_11_Pin
 800062e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000632:	60bb      	str	r3, [r7, #8]
                          |LED_12_Pin|SEG_33_Pin|SEG_44_Pin|SEG_55_Pin
                          |SEG_66_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin
                          |LED_7_Pin|LED_8_Pin|LED_9_Pin|LED_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2302      	movs	r3, #2
 800063e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	4619      	mov	r1, r3
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_GPIO_Init+0xa8>)
 8000648:	f000 fea0 	bl	800138c <HAL_GPIO_Init>

}
 800064c:	bf00      	nop
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000
 8000658:	40010800 	.word	0x40010800
 800065c:	40010c00 	.word	0x40010c00

08000660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000664:	b672      	cpsid	i
}
 8000666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000668:	e7fe      	b.n	8000668 <Error_Handler+0x8>
	...

0800066c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <HAL_MspInit+0x5c>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <HAL_MspInit+0x5c>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6193      	str	r3, [r2, #24]
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_MspInit+0x5c>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_MspInit+0x5c>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_MspInit+0x5c>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000694:	61d3      	str	r3, [r2, #28]
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_MspInit+0x5c>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80006a2:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <HAL_MspInit+0x60>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <HAL_MspInit+0x60>)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010000 	.word	0x40010000

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <NMI_Handler+0x4>

080006d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <HardFault_Handler+0x4>

080006dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <MemManage_Handler+0x4>

080006e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <UsageFault_Handler+0x4>

080006ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr

080006fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr

08000706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000716:	f000 fd15 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}

0800071e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
	...

0800072c <clearP0A>:
#ifndef SRC_VOID_C_
#define SRC_VOID_C_
#include "void.h"
//------------------------------hien thuc ham-------------------------------
void clearP0A()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_All, GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000736:	4802      	ldr	r0, [pc, #8]	; (8000740 <clearP0A+0x14>)
 8000738:	f000 ffa2 	bl	8001680 <HAL_GPIO_WritePin>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40010800 	.word	0x40010800

08000744 <clearP0B>:

void clearP0B()
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800074e:	4802      	ldr	r0, [pc, #8]	; (8000758 <clearP0B+0x14>)
 8000750:	f000 ff96 	bl	8001680 <HAL_GPIO_WritePin>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40010c00 	.word	0x40010c00

0800075c <clearSegdu>:

void clearSegdu()
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_33_GPIO_Port, SEG_33_Pin, SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000766:	480b      	ldr	r0, [pc, #44]	; (8000794 <clearSegdu+0x38>)
 8000768:	f000 ff8a 	bl	8001680 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_44_GPIO_Port, SEG_44_Pin, SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000772:	4808      	ldr	r0, [pc, #32]	; (8000794 <clearSegdu+0x38>)
 8000774:	f000 ff84 	bl	8001680 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_55_GPIO_Port, SEG_55_Pin, SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <clearSegdu+0x38>)
 8000780:	f000 ff7e 	bl	8001680 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_66_GPIO_Port, SEG_66_Pin, SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078a:	4802      	ldr	r0, [pc, #8]	; (8000794 <clearSegdu+0x38>)
 800078c:	f000 ff78 	bl	8001680 <HAL_GPIO_WritePin>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40010c00 	.word	0x40010c00

08000798 <setLed>:

void setLed(int num)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	if (num == 12)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b0c      	cmp	r3, #12
 80007a4:	d105      	bne.n	80007b2 <setLed+0x1a>
	{
		HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	4830      	ldr	r0, [pc, #192]	; (8000870 <setLed+0xd8>)
 80007ae:	f000 ff67 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 1)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d104      	bne.n	80007c2 <setLed+0x2a>
	{
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2101      	movs	r1, #1
 80007bc:	482c      	ldr	r0, [pc, #176]	; (8000870 <setLed+0xd8>)
 80007be:	f000 ff5f 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 2)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d104      	bne.n	80007d2 <setLed+0x3a>
	{
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2102      	movs	r1, #2
 80007cc:	4828      	ldr	r0, [pc, #160]	; (8000870 <setLed+0xd8>)
 80007ce:	f000 ff57 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 3)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	d104      	bne.n	80007e2 <setLed+0x4a>
	{
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2104      	movs	r1, #4
 80007dc:	4824      	ldr	r0, [pc, #144]	; (8000870 <setLed+0xd8>)
 80007de:	f000 ff4f 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 4)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d104      	bne.n	80007f2 <setLed+0x5a>
	{
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2108      	movs	r1, #8
 80007ec:	4820      	ldr	r0, [pc, #128]	; (8000870 <setLed+0xd8>)
 80007ee:	f000 ff47 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 5)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b05      	cmp	r3, #5
 80007f6:	d104      	bne.n	8000802 <setLed+0x6a>
	{
		HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2110      	movs	r1, #16
 80007fc:	481c      	ldr	r0, [pc, #112]	; (8000870 <setLed+0xd8>)
 80007fe:	f000 ff3f 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 6)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b06      	cmp	r3, #6
 8000806:	d104      	bne.n	8000812 <setLed+0x7a>
	{
		HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2120      	movs	r1, #32
 800080c:	4818      	ldr	r0, [pc, #96]	; (8000870 <setLed+0xd8>)
 800080e:	f000 ff37 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 7)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b07      	cmp	r3, #7
 8000816:	d104      	bne.n	8000822 <setLed+0x8a>
	{
		HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2140      	movs	r1, #64	; 0x40
 800081c:	4814      	ldr	r0, [pc, #80]	; (8000870 <setLed+0xd8>)
 800081e:	f000 ff2f 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 8)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b08      	cmp	r3, #8
 8000826:	d104      	bne.n	8000832 <setLed+0x9a>
	{
		HAL_GPIO_WritePin(LED_8_GPIO_Port, LED_8_Pin, SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2180      	movs	r1, #128	; 0x80
 800082c:	4810      	ldr	r0, [pc, #64]	; (8000870 <setLed+0xd8>)
 800082e:	f000 ff27 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 9)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b09      	cmp	r3, #9
 8000836:	d105      	bne.n	8000844 <setLed+0xac>
	{
		HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <setLed+0xd8>)
 8000840:	f000 ff1e 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 10)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b0a      	cmp	r3, #10
 8000848:	d105      	bne.n	8000856 <setLed+0xbe>
	{
		HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000850:	4807      	ldr	r0, [pc, #28]	; (8000870 <setLed+0xd8>)
 8000852:	f000 ff15 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 11)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0b      	cmp	r3, #11
 800085a:	d105      	bne.n	8000868 <setLed+0xd0>
	{
		HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000862:	4803      	ldr	r0, [pc, #12]	; (8000870 <setLed+0xd8>)
 8000864:	f000 ff0c 	bl	8001680 <HAL_GPIO_WritePin>
	}
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40010c00 	.word	0x40010c00

08000874 <clearLed>:

void clearLed(int num)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if (num == 12)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b0c      	cmp	r3, #12
 8000880:	d105      	bne.n	800088e <clearLed+0x1a>
	{
		HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000888:	4830      	ldr	r0, [pc, #192]	; (800094c <clearLed+0xd8>)
 800088a:	f000 fef9 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 1)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d104      	bne.n	800089e <clearLed+0x2a>
	{
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2101      	movs	r1, #1
 8000898:	482c      	ldr	r0, [pc, #176]	; (800094c <clearLed+0xd8>)
 800089a:	f000 fef1 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 2)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d104      	bne.n	80008ae <clearLed+0x3a>
	{
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2102      	movs	r1, #2
 80008a8:	4828      	ldr	r0, [pc, #160]	; (800094c <clearLed+0xd8>)
 80008aa:	f000 fee9 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 3)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b03      	cmp	r3, #3
 80008b2:	d104      	bne.n	80008be <clearLed+0x4a>
	{
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2104      	movs	r1, #4
 80008b8:	4824      	ldr	r0, [pc, #144]	; (800094c <clearLed+0xd8>)
 80008ba:	f000 fee1 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 4)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b04      	cmp	r3, #4
 80008c2:	d104      	bne.n	80008ce <clearLed+0x5a>
	{
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2108      	movs	r1, #8
 80008c8:	4820      	ldr	r0, [pc, #128]	; (800094c <clearLed+0xd8>)
 80008ca:	f000 fed9 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 5)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b05      	cmp	r3, #5
 80008d2:	d104      	bne.n	80008de <clearLed+0x6a>
	{
		HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2110      	movs	r1, #16
 80008d8:	481c      	ldr	r0, [pc, #112]	; (800094c <clearLed+0xd8>)
 80008da:	f000 fed1 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 6)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b06      	cmp	r3, #6
 80008e2:	d104      	bne.n	80008ee <clearLed+0x7a>
	{
		HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2120      	movs	r1, #32
 80008e8:	4818      	ldr	r0, [pc, #96]	; (800094c <clearLed+0xd8>)
 80008ea:	f000 fec9 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 7)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b07      	cmp	r3, #7
 80008f2:	d104      	bne.n	80008fe <clearLed+0x8a>
	{
		HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2140      	movs	r1, #64	; 0x40
 80008f8:	4814      	ldr	r0, [pc, #80]	; (800094c <clearLed+0xd8>)
 80008fa:	f000 fec1 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 8)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b08      	cmp	r3, #8
 8000902:	d104      	bne.n	800090e <clearLed+0x9a>
	{
		HAL_GPIO_WritePin(LED_8_GPIO_Port, LED_8_Pin, RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2180      	movs	r1, #128	; 0x80
 8000908:	4810      	ldr	r0, [pc, #64]	; (800094c <clearLed+0xd8>)
 800090a:	f000 feb9 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 9)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b09      	cmp	r3, #9
 8000912:	d105      	bne.n	8000920 <clearLed+0xac>
	{
		HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <clearLed+0xd8>)
 800091c:	f000 feb0 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 10)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b0a      	cmp	r3, #10
 8000924:	d105      	bne.n	8000932 <clearLed+0xbe>
	{
		HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 7100 	mov.w	r1, #512	; 0x200
 800092c:	4807      	ldr	r0, [pc, #28]	; (800094c <clearLed+0xd8>)
 800092e:	f000 fea7 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 11)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b0b      	cmp	r3, #11
 8000936:	d105      	bne.n	8000944 <clearLed+0xd0>
	{
		HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4803      	ldr	r0, [pc, #12]	; (800094c <clearLed+0xd8>)
 8000940:	f000 fe9e 	bl	8001680 <HAL_GPIO_WritePin>
	}
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40010c00 	.word	0x40010c00

08000950 <numSeg1>:

void numSeg1(int num)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	if (num == 0)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d128      	bne.n	80009b0 <numSeg1+0x60>
	{
		 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000964:	48d3      	ldr	r0, [pc, #844]	; (8000cb4 <numSeg1+0x364>)
 8000966:	f000 fe8b 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	48d1      	ldr	r0, [pc, #836]	; (8000cb4 <numSeg1+0x364>)
 8000970:	f000 fe86 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097a:	48ce      	ldr	r0, [pc, #824]	; (8000cb4 <numSeg1+0x364>)
 800097c:	f000 fe80 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000986:	48cb      	ldr	r0, [pc, #812]	; (8000cb4 <numSeg1+0x364>)
 8000988:	f000 fe7a 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000992:	48c8      	ldr	r0, [pc, #800]	; (8000cb4 <numSeg1+0x364>)
 8000994:	f000 fe74 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800099e:	48c5      	ldr	r0, [pc, #788]	; (8000cb4 <numSeg1+0x364>)
 80009a0:	f000 fe6e 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009aa:	48c2      	ldr	r0, [pc, #776]	; (8000cb4 <numSeg1+0x364>)
 80009ac:	f000 fe68 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d128      	bne.n	8000a08 <numSeg1+0xb8>
	{
		 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009bc:	48bd      	ldr	r0, [pc, #756]	; (8000cb4 <numSeg1+0x364>)
 80009be:	f000 fe5f 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2180      	movs	r1, #128	; 0x80
 80009c6:	48bb      	ldr	r0, [pc, #748]	; (8000cb4 <numSeg1+0x364>)
 80009c8:	f000 fe5a 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d2:	48b8      	ldr	r0, [pc, #736]	; (8000cb4 <numSeg1+0x364>)
 80009d4:	f000 fe54 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009de:	48b5      	ldr	r0, [pc, #724]	; (8000cb4 <numSeg1+0x364>)
 80009e0:	f000 fe4e 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ea:	48b2      	ldr	r0, [pc, #712]	; (8000cb4 <numSeg1+0x364>)
 80009ec:	f000 fe48 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f6:	48af      	ldr	r0, [pc, #700]	; (8000cb4 <numSeg1+0x364>)
 80009f8:	f000 fe42 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a02:	48ac      	ldr	r0, [pc, #688]	; (8000cb4 <numSeg1+0x364>)
 8000a04:	f000 fe3c 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 2)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d128      	bne.n	8000a60 <numSeg1+0x110>
	{
		 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a14:	48a7      	ldr	r0, [pc, #668]	; (8000cb4 <numSeg1+0x364>)
 8000a16:	f000 fe33 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	48a5      	ldr	r0, [pc, #660]	; (8000cb4 <numSeg1+0x364>)
 8000a20:	f000 fe2e 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2a:	48a2      	ldr	r0, [pc, #648]	; (8000cb4 <numSeg1+0x364>)
 8000a2c:	f000 fe28 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a36:	489f      	ldr	r0, [pc, #636]	; (8000cb4 <numSeg1+0x364>)
 8000a38:	f000 fe22 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a42:	489c      	ldr	r0, [pc, #624]	; (8000cb4 <numSeg1+0x364>)
 8000a44:	f000 fe1c 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a4e:	4899      	ldr	r0, [pc, #612]	; (8000cb4 <numSeg1+0x364>)
 8000a50:	f000 fe16 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a5a:	4896      	ldr	r0, [pc, #600]	; (8000cb4 <numSeg1+0x364>)
 8000a5c:	f000 fe10 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 3)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	d128      	bne.n	8000ab8 <numSeg1+0x168>
	{
		 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6c:	4891      	ldr	r0, [pc, #580]	; (8000cb4 <numSeg1+0x364>)
 8000a6e:	f000 fe07 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	488f      	ldr	r0, [pc, #572]	; (8000cb4 <numSeg1+0x364>)
 8000a78:	f000 fe02 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a82:	488c      	ldr	r0, [pc, #560]	; (8000cb4 <numSeg1+0x364>)
 8000a84:	f000 fdfc 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8e:	4889      	ldr	r0, [pc, #548]	; (8000cb4 <numSeg1+0x364>)
 8000a90:	f000 fdf6 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a9a:	4886      	ldr	r0, [pc, #536]	; (8000cb4 <numSeg1+0x364>)
 8000a9c:	f000 fdf0 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa6:	4883      	ldr	r0, [pc, #524]	; (8000cb4 <numSeg1+0x364>)
 8000aa8:	f000 fdea 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab2:	4880      	ldr	r0, [pc, #512]	; (8000cb4 <numSeg1+0x364>)
 8000ab4:	f000 fde4 	bl	8001680 <HAL_GPIO_WritePin>

	}
	if (num == 4)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d128      	bne.n	8000b10 <numSeg1+0x1c0>
	{
		 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac4:	487b      	ldr	r0, [pc, #492]	; (8000cb4 <numSeg1+0x364>)
 8000ac6:	f000 fddb 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	4879      	ldr	r0, [pc, #484]	; (8000cb4 <numSeg1+0x364>)
 8000ad0:	f000 fdd6 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ada:	4876      	ldr	r0, [pc, #472]	; (8000cb4 <numSeg1+0x364>)
 8000adc:	f000 fdd0 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae6:	4873      	ldr	r0, [pc, #460]	; (8000cb4 <numSeg1+0x364>)
 8000ae8:	f000 fdca 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af2:	4870      	ldr	r0, [pc, #448]	; (8000cb4 <numSeg1+0x364>)
 8000af4:	f000 fdc4 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000afe:	486d      	ldr	r0, [pc, #436]	; (8000cb4 <numSeg1+0x364>)
 8000b00:	f000 fdbe 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b0a:	486a      	ldr	r0, [pc, #424]	; (8000cb4 <numSeg1+0x364>)
 8000b0c:	f000 fdb8 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 5)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b05      	cmp	r3, #5
 8000b14:	d128      	bne.n	8000b68 <numSeg1+0x218>
	{
		 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1c:	4865      	ldr	r0, [pc, #404]	; (8000cb4 <numSeg1+0x364>)
 8000b1e:	f000 fdaf 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	4863      	ldr	r0, [pc, #396]	; (8000cb4 <numSeg1+0x364>)
 8000b28:	f000 fdaa 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b32:	4860      	ldr	r0, [pc, #384]	; (8000cb4 <numSeg1+0x364>)
 8000b34:	f000 fda4 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b3e:	485d      	ldr	r0, [pc, #372]	; (8000cb4 <numSeg1+0x364>)
 8000b40:	f000 fd9e 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b4a:	485a      	ldr	r0, [pc, #360]	; (8000cb4 <numSeg1+0x364>)
 8000b4c:	f000 fd98 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b56:	4857      	ldr	r0, [pc, #348]	; (8000cb4 <numSeg1+0x364>)
 8000b58:	f000 fd92 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b62:	4854      	ldr	r0, [pc, #336]	; (8000cb4 <numSeg1+0x364>)
 8000b64:	f000 fd8c 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 6)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d128      	bne.n	8000bc0 <numSeg1+0x270>
	{
		 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b74:	484f      	ldr	r0, [pc, #316]	; (8000cb4 <numSeg1+0x364>)
 8000b76:	f000 fd83 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	484d      	ldr	r0, [pc, #308]	; (8000cb4 <numSeg1+0x364>)
 8000b80:	f000 fd7e 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8a:	484a      	ldr	r0, [pc, #296]	; (8000cb4 <numSeg1+0x364>)
 8000b8c:	f000 fd78 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b96:	4847      	ldr	r0, [pc, #284]	; (8000cb4 <numSeg1+0x364>)
 8000b98:	f000 fd72 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba2:	4844      	ldr	r0, [pc, #272]	; (8000cb4 <numSeg1+0x364>)
 8000ba4:	f000 fd6c 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bae:	4841      	ldr	r0, [pc, #260]	; (8000cb4 <numSeg1+0x364>)
 8000bb0:	f000 fd66 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bba:	483e      	ldr	r0, [pc, #248]	; (8000cb4 <numSeg1+0x364>)
 8000bbc:	f000 fd60 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 7)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b07      	cmp	r3, #7
 8000bc4:	d128      	bne.n	8000c18 <numSeg1+0x2c8>
	{
		 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bcc:	4839      	ldr	r0, [pc, #228]	; (8000cb4 <numSeg1+0x364>)
 8000bce:	f000 fd57 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	4837      	ldr	r0, [pc, #220]	; (8000cb4 <numSeg1+0x364>)
 8000bd8:	f000 fd52 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be2:	4834      	ldr	r0, [pc, #208]	; (8000cb4 <numSeg1+0x364>)
 8000be4:	f000 fd4c 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bee:	4831      	ldr	r0, [pc, #196]	; (8000cb4 <numSeg1+0x364>)
 8000bf0:	f000 fd46 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bfa:	482e      	ldr	r0, [pc, #184]	; (8000cb4 <numSeg1+0x364>)
 8000bfc:	f000 fd40 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c06:	482b      	ldr	r0, [pc, #172]	; (8000cb4 <numSeg1+0x364>)
 8000c08:	f000 fd3a 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c12:	4828      	ldr	r0, [pc, #160]	; (8000cb4 <numSeg1+0x364>)
 8000c14:	f000 fd34 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 8)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b08      	cmp	r3, #8
 8000c1c:	d128      	bne.n	8000c70 <numSeg1+0x320>
	{
		 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c24:	4823      	ldr	r0, [pc, #140]	; (8000cb4 <numSeg1+0x364>)
 8000c26:	f000 fd2b 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	4821      	ldr	r0, [pc, #132]	; (8000cb4 <numSeg1+0x364>)
 8000c30:	f000 fd26 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3a:	481e      	ldr	r0, [pc, #120]	; (8000cb4 <numSeg1+0x364>)
 8000c3c:	f000 fd20 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c46:	481b      	ldr	r0, [pc, #108]	; (8000cb4 <numSeg1+0x364>)
 8000c48:	f000 fd1a 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c52:	4818      	ldr	r0, [pc, #96]	; (8000cb4 <numSeg1+0x364>)
 8000c54:	f000 fd14 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c5e:	4815      	ldr	r0, [pc, #84]	; (8000cb4 <numSeg1+0x364>)
 8000c60:	f000 fd0e 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c6a:	4812      	ldr	r0, [pc, #72]	; (8000cb4 <numSeg1+0x364>)
 8000c6c:	f000 fd08 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 9)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b09      	cmp	r3, #9
 8000c74:	d12c      	bne.n	8000cd0 <numSeg1+0x380>
	{
		 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <numSeg1+0x364>)
 8000c7e:	f000 fcff 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <numSeg1+0x364>)
 8000c88:	f000 fcfa 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c92:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <numSeg1+0x364>)
 8000c94:	f000 fcf4 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <numSeg1+0x364>)
 8000ca0:	f000 fcee 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000caa:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <numSeg1+0x364>)
 8000cac:	f000 fce8 	bl	8001680 <HAL_GPIO_WritePin>
 8000cb0:	e002      	b.n	8000cb8 <numSeg1+0x368>
 8000cb2:	bf00      	nop
 8000cb4:	40010800 	.word	0x40010800
		 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <numSeg1+0x388>)
 8000cc0:	f000 fcde 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cca:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <numSeg1+0x388>)
 8000ccc:	f000 fcd8 	bl	8001680 <HAL_GPIO_WritePin>
	}
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40010800 	.word	0x40010800

08000cdc <numSeg2>:

void numSeg2(int num)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	if (num == 0)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d128      	bne.n	8000d3c <numSeg2+0x60>
	{
		 HAL_GPIO_WritePin(SEG_66_GPIO_Port, SEG_66_Pin, SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cf0:	48d3      	ldr	r0, [pc, #844]	; (8001040 <numSeg2+0x364>)
 8000cf2:	f000 fcc5 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2140      	movs	r1, #64	; 0x40
 8000cfa:	48d2      	ldr	r0, [pc, #840]	; (8001044 <numSeg2+0x368>)
 8000cfc:	f000 fcc0 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d06:	48cf      	ldr	r0, [pc, #828]	; (8001044 <numSeg2+0x368>)
 8000d08:	f000 fcba 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_22_GPIO_Port, SEG_22_Pin, RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d12:	48cc      	ldr	r0, [pc, #816]	; (8001044 <numSeg2+0x368>)
 8000d14:	f000 fcb4 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_33_GPIO_Port, SEG_33_Pin, RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1e:	48c8      	ldr	r0, [pc, #800]	; (8001040 <numSeg2+0x364>)
 8000d20:	f000 fcae 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_44_GPIO_Port, SEG_44_Pin, RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d2a:	48c5      	ldr	r0, [pc, #788]	; (8001040 <numSeg2+0x364>)
 8000d2c:	f000 fca8 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_55_GPIO_Port, SEG_55_Pin, RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d36:	48c2      	ldr	r0, [pc, #776]	; (8001040 <numSeg2+0x364>)
 8000d38:	f000 fca2 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d128      	bne.n	8000d94 <numSeg2+0xb8>
	{
		 HAL_GPIO_WritePin(SEG_66_GPIO_Port, SEG_66_Pin, SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d48:	48bd      	ldr	r0, [pc, #756]	; (8001040 <numSeg2+0x364>)
 8000d4a:	f000 fc99 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2140      	movs	r1, #64	; 0x40
 8000d52:	48bc      	ldr	r0, [pc, #752]	; (8001044 <numSeg2+0x368>)
 8000d54:	f000 fc94 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d5e:	48b9      	ldr	r0, [pc, #740]	; (8001044 <numSeg2+0x368>)
 8000d60:	f000 fc8e 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_22_GPIO_Port, SEG_22_Pin, RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d6a:	48b6      	ldr	r0, [pc, #728]	; (8001044 <numSeg2+0x368>)
 8000d6c:	f000 fc88 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_33_GPIO_Port, SEG_33_Pin, SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d76:	48b2      	ldr	r0, [pc, #712]	; (8001040 <numSeg2+0x364>)
 8000d78:	f000 fc82 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_44_GPIO_Port, SEG_44_Pin, SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d82:	48af      	ldr	r0, [pc, #700]	; (8001040 <numSeg2+0x364>)
 8000d84:	f000 fc7c 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_55_GPIO_Port, SEG_55_Pin, SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8e:	48ac      	ldr	r0, [pc, #688]	; (8001040 <numSeg2+0x364>)
 8000d90:	f000 fc76 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 2)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d128      	bne.n	8000dec <numSeg2+0x110>
	{
		 HAL_GPIO_WritePin(SEG_66_GPIO_Port, SEG_66_Pin, RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da0:	48a7      	ldr	r0, [pc, #668]	; (8001040 <numSeg2+0x364>)
 8000da2:	f000 fc6d 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2140      	movs	r1, #64	; 0x40
 8000daa:	48a6      	ldr	r0, [pc, #664]	; (8001044 <numSeg2+0x368>)
 8000dac:	f000 fc68 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000db6:	48a3      	ldr	r0, [pc, #652]	; (8001044 <numSeg2+0x368>)
 8000db8:	f000 fc62 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_22_GPIO_Port, SEG_22_Pin, SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dc2:	48a0      	ldr	r0, [pc, #640]	; (8001044 <numSeg2+0x368>)
 8000dc4:	f000 fc5c 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_33_GPIO_Port, SEG_33_Pin, RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dce:	489c      	ldr	r0, [pc, #624]	; (8001040 <numSeg2+0x364>)
 8000dd0:	f000 fc56 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_44_GPIO_Port, SEG_44_Pin, RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dda:	4899      	ldr	r0, [pc, #612]	; (8001040 <numSeg2+0x364>)
 8000ddc:	f000 fc50 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_55_GPIO_Port, SEG_55_Pin, SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de6:	4896      	ldr	r0, [pc, #600]	; (8001040 <numSeg2+0x364>)
 8000de8:	f000 fc4a 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 3)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d128      	bne.n	8000e44 <numSeg2+0x168>
	{
		 HAL_GPIO_WritePin(SEG_66_GPIO_Port, SEG_66_Pin, RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df8:	4891      	ldr	r0, [pc, #580]	; (8001040 <numSeg2+0x364>)
 8000dfa:	f000 fc41 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2140      	movs	r1, #64	; 0x40
 8000e02:	4890      	ldr	r0, [pc, #576]	; (8001044 <numSeg2+0x368>)
 8000e04:	f000 fc3c 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e0e:	488d      	ldr	r0, [pc, #564]	; (8001044 <numSeg2+0x368>)
 8000e10:	f000 fc36 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_22_GPIO_Port, SEG_22_Pin, RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1a:	488a      	ldr	r0, [pc, #552]	; (8001044 <numSeg2+0x368>)
 8000e1c:	f000 fc30 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_33_GPIO_Port, SEG_33_Pin, RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e26:	4886      	ldr	r0, [pc, #536]	; (8001040 <numSeg2+0x364>)
 8000e28:	f000 fc2a 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_44_GPIO_Port, SEG_44_Pin, SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e32:	4883      	ldr	r0, [pc, #524]	; (8001040 <numSeg2+0x364>)
 8000e34:	f000 fc24 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_55_GPIO_Port, SEG_55_Pin, SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e3e:	4880      	ldr	r0, [pc, #512]	; (8001040 <numSeg2+0x364>)
 8000e40:	f000 fc1e 	bl	8001680 <HAL_GPIO_WritePin>

	}
	if (num == 4)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	d128      	bne.n	8000e9c <numSeg2+0x1c0>
	{
		 HAL_GPIO_WritePin(SEG_66_GPIO_Port, SEG_66_Pin, RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e50:	487b      	ldr	r0, [pc, #492]	; (8001040 <numSeg2+0x364>)
 8000e52:	f000 fc15 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2140      	movs	r1, #64	; 0x40
 8000e5a:	487a      	ldr	r0, [pc, #488]	; (8001044 <numSeg2+0x368>)
 8000e5c:	f000 fc10 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e66:	4877      	ldr	r0, [pc, #476]	; (8001044 <numSeg2+0x368>)
 8000e68:	f000 fc0a 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_22_GPIO_Port, SEG_22_Pin, RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e72:	4874      	ldr	r0, [pc, #464]	; (8001044 <numSeg2+0x368>)
 8000e74:	f000 fc04 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_33_GPIO_Port, SEG_33_Pin, SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e7e:	4870      	ldr	r0, [pc, #448]	; (8001040 <numSeg2+0x364>)
 8000e80:	f000 fbfe 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_44_GPIO_Port, SEG_44_Pin, SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8a:	486d      	ldr	r0, [pc, #436]	; (8001040 <numSeg2+0x364>)
 8000e8c:	f000 fbf8 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_55_GPIO_Port, SEG_55_Pin, RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e96:	486a      	ldr	r0, [pc, #424]	; (8001040 <numSeg2+0x364>)
 8000e98:	f000 fbf2 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 5)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b05      	cmp	r3, #5
 8000ea0:	d128      	bne.n	8000ef4 <numSeg2+0x218>
	{
		 HAL_GPIO_WritePin(SEG_66_GPIO_Port, SEG_66_Pin, RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea8:	4865      	ldr	r0, [pc, #404]	; (8001040 <numSeg2+0x364>)
 8000eaa:	f000 fbe9 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2140      	movs	r1, #64	; 0x40
 8000eb2:	4864      	ldr	r0, [pc, #400]	; (8001044 <numSeg2+0x368>)
 8000eb4:	f000 fbe4 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ebe:	4861      	ldr	r0, [pc, #388]	; (8001044 <numSeg2+0x368>)
 8000ec0:	f000 fbde 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_22_GPIO_Port, SEG_22_Pin, RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eca:	485e      	ldr	r0, [pc, #376]	; (8001044 <numSeg2+0x368>)
 8000ecc:	f000 fbd8 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_33_GPIO_Port, SEG_33_Pin, RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed6:	485a      	ldr	r0, [pc, #360]	; (8001040 <numSeg2+0x364>)
 8000ed8:	f000 fbd2 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_44_GPIO_Port, SEG_44_Pin, SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee2:	4857      	ldr	r0, [pc, #348]	; (8001040 <numSeg2+0x364>)
 8000ee4:	f000 fbcc 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_55_GPIO_Port, SEG_55_Pin, RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eee:	4854      	ldr	r0, [pc, #336]	; (8001040 <numSeg2+0x364>)
 8000ef0:	f000 fbc6 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 6)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d128      	bne.n	8000f4c <numSeg2+0x270>
	{
		 HAL_GPIO_WritePin(SEG_66_GPIO_Port, SEG_66_Pin, RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f00:	484f      	ldr	r0, [pc, #316]	; (8001040 <numSeg2+0x364>)
 8000f02:	f000 fbbd 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2140      	movs	r1, #64	; 0x40
 8000f0a:	484e      	ldr	r0, [pc, #312]	; (8001044 <numSeg2+0x368>)
 8000f0c:	f000 fbb8 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f16:	484b      	ldr	r0, [pc, #300]	; (8001044 <numSeg2+0x368>)
 8000f18:	f000 fbb2 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_22_GPIO_Port, SEG_22_Pin, RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f22:	4848      	ldr	r0, [pc, #288]	; (8001044 <numSeg2+0x368>)
 8000f24:	f000 fbac 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_33_GPIO_Port, SEG_33_Pin, RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f2e:	4844      	ldr	r0, [pc, #272]	; (8001040 <numSeg2+0x364>)
 8000f30:	f000 fba6 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_44_GPIO_Port, SEG_44_Pin, RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3a:	4841      	ldr	r0, [pc, #260]	; (8001040 <numSeg2+0x364>)
 8000f3c:	f000 fba0 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_55_GPIO_Port, SEG_55_Pin, RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f46:	483e      	ldr	r0, [pc, #248]	; (8001040 <numSeg2+0x364>)
 8000f48:	f000 fb9a 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 7)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	d128      	bne.n	8000fa4 <numSeg2+0x2c8>
	{
		 HAL_GPIO_WritePin(SEG_66_GPIO_Port, SEG_66_Pin, SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f58:	4839      	ldr	r0, [pc, #228]	; (8001040 <numSeg2+0x364>)
 8000f5a:	f000 fb91 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2140      	movs	r1, #64	; 0x40
 8000f62:	4838      	ldr	r0, [pc, #224]	; (8001044 <numSeg2+0x368>)
 8000f64:	f000 fb8c 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f6e:	4835      	ldr	r0, [pc, #212]	; (8001044 <numSeg2+0x368>)
 8000f70:	f000 fb86 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_22_GPIO_Port, SEG_22_Pin, RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f7a:	4832      	ldr	r0, [pc, #200]	; (8001044 <numSeg2+0x368>)
 8000f7c:	f000 fb80 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_33_GPIO_Port, SEG_33_Pin, SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f86:	482e      	ldr	r0, [pc, #184]	; (8001040 <numSeg2+0x364>)
 8000f88:	f000 fb7a 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_44_GPIO_Port, SEG_44_Pin, SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f92:	482b      	ldr	r0, [pc, #172]	; (8001040 <numSeg2+0x364>)
 8000f94:	f000 fb74 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_55_GPIO_Port, SEG_55_Pin, SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f9e:	4828      	ldr	r0, [pc, #160]	; (8001040 <numSeg2+0x364>)
 8000fa0:	f000 fb6e 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 8)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b08      	cmp	r3, #8
 8000fa8:	d128      	bne.n	8000ffc <numSeg2+0x320>
	{
		 HAL_GPIO_WritePin(SEG_66_GPIO_Port, SEG_66_Pin, RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb0:	4823      	ldr	r0, [pc, #140]	; (8001040 <numSeg2+0x364>)
 8000fb2:	f000 fb65 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2140      	movs	r1, #64	; 0x40
 8000fba:	4822      	ldr	r0, [pc, #136]	; (8001044 <numSeg2+0x368>)
 8000fbc:	f000 fb60 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fc6:	481f      	ldr	r0, [pc, #124]	; (8001044 <numSeg2+0x368>)
 8000fc8:	f000 fb5a 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_22_GPIO_Port, SEG_22_Pin, RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd2:	481c      	ldr	r0, [pc, #112]	; (8001044 <numSeg2+0x368>)
 8000fd4:	f000 fb54 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_33_GPIO_Port, SEG_33_Pin, RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fde:	4818      	ldr	r0, [pc, #96]	; (8001040 <numSeg2+0x364>)
 8000fe0:	f000 fb4e 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_44_GPIO_Port, SEG_44_Pin, RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fea:	4815      	ldr	r0, [pc, #84]	; (8001040 <numSeg2+0x364>)
 8000fec:	f000 fb48 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_55_GPIO_Port, SEG_55_Pin, RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff6:	4812      	ldr	r0, [pc, #72]	; (8001040 <numSeg2+0x364>)
 8000ff8:	f000 fb42 	bl	8001680 <HAL_GPIO_WritePin>
	}
	if (num == 9)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b09      	cmp	r3, #9
 8001000:	d12e      	bne.n	8001060 <numSeg2+0x384>
	{
		 HAL_GPIO_WritePin(SEG_66_GPIO_Port, SEG_66_Pin, RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <numSeg2+0x364>)
 800100a:	f000 fb39 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2140      	movs	r1, #64	; 0x40
 8001012:	480c      	ldr	r0, [pc, #48]	; (8001044 <numSeg2+0x368>)
 8001014:	f000 fb34 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800101e:	4809      	ldr	r0, [pc, #36]	; (8001044 <numSeg2+0x368>)
 8001020:	f000 fb2e 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_22_GPIO_Port, SEG_22_Pin, RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102a:	4806      	ldr	r0, [pc, #24]	; (8001044 <numSeg2+0x368>)
 800102c:	f000 fb28 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_33_GPIO_Port, SEG_33_Pin, RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001036:	4802      	ldr	r0, [pc, #8]	; (8001040 <numSeg2+0x364>)
 8001038:	f000 fb22 	bl	8001680 <HAL_GPIO_WritePin>
 800103c:	e004      	b.n	8001048 <numSeg2+0x36c>
 800103e:	bf00      	nop
 8001040:	40010c00 	.word	0x40010c00
 8001044:	40010800 	.word	0x40010800
		 HAL_GPIO_WritePin(SEG_44_GPIO_Port, SEG_44_Pin, SET);
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <numSeg2+0x38c>)
 8001050:	f000 fb16 	bl	8001680 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_55_GPIO_Port, SEG_55_Pin, RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800105a:	4803      	ldr	r0, [pc, #12]	; (8001068 <numSeg2+0x38c>)
 800105c:	f000 fb10 	bl	8001680 <HAL_GPIO_WritePin>
	}
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40010c00 	.word	0x40010c00

0800106c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800106c:	f7ff fb57 	bl	800071e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001072:	490c      	ldr	r1, [pc, #48]	; (80010a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001074:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a09      	ldr	r2, [pc, #36]	; (80010ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001088:	4c09      	ldr	r4, [pc, #36]	; (80010b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001096:	f000 fee7 	bl	8001e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800109a:	f7ff f857 	bl	800014c <main>
  bx lr
 800109e:	4770      	bx	lr
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010a8:	08001f04 	.word	0x08001f04
  ldr r2, =_sbss
 80010ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010b0:	2000002c 	.word	0x2000002c

080010b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC1_2_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_Init+0x28>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_Init+0x28>)
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f92b 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ce:	200f      	movs	r0, #15
 80010d0:	f000 f808 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f7ff faca 	bl	800066c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40022000 	.word	0x40022000

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x54>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_InitTick+0x58>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f935 	bl	8001372 <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 f90b 	bl	800133a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <HAL_InitTick+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000000 	.word	0x20000000
 800113c:	20000008 	.word	0x20000008
 8001140:	20000004 	.word	0x20000004

08001144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_IncTick+0x1c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_IncTick+0x20>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a03      	ldr	r2, [pc, #12]	; (8001164 <HAL_IncTick+0x20>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	20000008 	.word	0x20000008
 8001164:	20000028 	.word	0x20000028

08001168 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b02      	ldr	r3, [pc, #8]	; (8001178 <HAL_GetTick+0x10>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	20000028 	.word	0x20000028

0800117c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001184:	f7ff fff0 	bl	8001168 <HAL_GetTick>
 8001188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001194:	d005      	beq.n	80011a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_Delay+0x44>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a2:	bf00      	nop
 80011a4:	f7ff ffe0 	bl	8001168 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8f7      	bhi.n	80011a4 <HAL_Delay+0x28>
  {
  }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008

080011c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db0a      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	490c      	ldr	r1, [pc, #48]	; (8001274 <__NVIC_SetPriority+0x4c>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	440b      	add	r3, r1
 800124c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001250:	e00a      	b.n	8001268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4908      	ldr	r1, [pc, #32]	; (8001278 <__NVIC_SetPriority+0x50>)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	3b04      	subs	r3, #4
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	440b      	add	r3, r1
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf28      	it	cs
 800129a:	2304      	movcs	r3, #4
 800129c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3304      	adds	r3, #4
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d902      	bls.n	80012ac <NVIC_EncodePriority+0x30>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	e000      	b.n	80012ae <NVIC_EncodePriority+0x32>
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	4313      	orrs	r3, r2
         );
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff90 	bl	8001228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff49 	bl	80011c4 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff5e 	bl	800120c <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff90 	bl	800127c <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5f 	bl	8001228 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffb0 	bl	80012e0 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b08b      	sub	sp, #44	; 0x2c
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139e:	e148      	b.n	8001632 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013a0:	2201      	movs	r2, #1
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	f040 8137 	bne.w	800162c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	4aa3      	ldr	r2, [pc, #652]	; (8001650 <HAL_GPIO_Init+0x2c4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d05e      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013c8:	4aa1      	ldr	r2, [pc, #644]	; (8001650 <HAL_GPIO_Init+0x2c4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d875      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013ce:	4aa1      	ldr	r2, [pc, #644]	; (8001654 <HAL_GPIO_Init+0x2c8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d058      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013d4:	4a9f      	ldr	r2, [pc, #636]	; (8001654 <HAL_GPIO_Init+0x2c8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d86f      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013da:	4a9f      	ldr	r2, [pc, #636]	; (8001658 <HAL_GPIO_Init+0x2cc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d052      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013e0:	4a9d      	ldr	r2, [pc, #628]	; (8001658 <HAL_GPIO_Init+0x2cc>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d869      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013e6:	4a9d      	ldr	r2, [pc, #628]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d04c      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013ec:	4a9b      	ldr	r2, [pc, #620]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d863      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013f2:	4a9b      	ldr	r2, [pc, #620]	; (8001660 <HAL_GPIO_Init+0x2d4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d046      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013f8:	4a99      	ldr	r2, [pc, #612]	; (8001660 <HAL_GPIO_Init+0x2d4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d85d      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013fe:	2b12      	cmp	r3, #18
 8001400:	d82a      	bhi.n	8001458 <HAL_GPIO_Init+0xcc>
 8001402:	2b12      	cmp	r3, #18
 8001404:	d859      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 8001406:	a201      	add	r2, pc, #4	; (adr r2, 800140c <HAL_GPIO_Init+0x80>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	08001487 	.word	0x08001487
 8001410:	08001461 	.word	0x08001461
 8001414:	08001473 	.word	0x08001473
 8001418:	080014b5 	.word	0x080014b5
 800141c:	080014bb 	.word	0x080014bb
 8001420:	080014bb 	.word	0x080014bb
 8001424:	080014bb 	.word	0x080014bb
 8001428:	080014bb 	.word	0x080014bb
 800142c:	080014bb 	.word	0x080014bb
 8001430:	080014bb 	.word	0x080014bb
 8001434:	080014bb 	.word	0x080014bb
 8001438:	080014bb 	.word	0x080014bb
 800143c:	080014bb 	.word	0x080014bb
 8001440:	080014bb 	.word	0x080014bb
 8001444:	080014bb 	.word	0x080014bb
 8001448:	080014bb 	.word	0x080014bb
 800144c:	080014bb 	.word	0x080014bb
 8001450:	08001469 	.word	0x08001469
 8001454:	0800147d 	.word	0x0800147d
 8001458:	4a82      	ldr	r2, [pc, #520]	; (8001664 <HAL_GPIO_Init+0x2d8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d013      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800145e:	e02c      	b.n	80014ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	623b      	str	r3, [r7, #32]
          break;
 8001466:	e029      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	3304      	adds	r3, #4
 800146e:	623b      	str	r3, [r7, #32]
          break;
 8001470:	e024      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	3308      	adds	r3, #8
 8001478:	623b      	str	r3, [r7, #32]
          break;
 800147a:	e01f      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	330c      	adds	r3, #12
 8001482:	623b      	str	r3, [r7, #32]
          break;
 8001484:	e01a      	b.n	80014bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800148e:	2304      	movs	r3, #4
 8001490:	623b      	str	r3, [r7, #32]
          break;
 8001492:	e013      	b.n	80014bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d105      	bne.n	80014a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800149c:	2308      	movs	r3, #8
 800149e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	611a      	str	r2, [r3, #16]
          break;
 80014a6:	e009      	b.n	80014bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a8:	2308      	movs	r3, #8
 80014aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	615a      	str	r2, [r3, #20]
          break;
 80014b2:	e003      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
          break;
 80014b8:	e000      	b.n	80014bc <HAL_GPIO_Init+0x130>
          break;
 80014ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2bff      	cmp	r3, #255	; 0xff
 80014c0:	d801      	bhi.n	80014c6 <HAL_GPIO_Init+0x13a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	e001      	b.n	80014ca <HAL_GPIO_Init+0x13e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3304      	adds	r3, #4
 80014ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2bff      	cmp	r3, #255	; 0xff
 80014d0:	d802      	bhi.n	80014d8 <HAL_GPIO_Init+0x14c>
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	e002      	b.n	80014de <HAL_GPIO_Init+0x152>
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	3b08      	subs	r3, #8
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	210f      	movs	r1, #15
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	401a      	ands	r2, r3
 80014f0:	6a39      	ldr	r1, [r7, #32]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	431a      	orrs	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8090 	beq.w	800162c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800150c:	4b56      	ldr	r3, [pc, #344]	; (8001668 <HAL_GPIO_Init+0x2dc>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a55      	ldr	r2, [pc, #340]	; (8001668 <HAL_GPIO_Init+0x2dc>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b53      	ldr	r3, [pc, #332]	; (8001668 <HAL_GPIO_Init+0x2dc>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001524:	4a51      	ldr	r2, [pc, #324]	; (800166c <HAL_GPIO_Init+0x2e0>)
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001530:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	220f      	movs	r2, #15
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	4013      	ands	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a49      	ldr	r2, [pc, #292]	; (8001670 <HAL_GPIO_Init+0x2e4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d00d      	beq.n	800156c <HAL_GPIO_Init+0x1e0>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a48      	ldr	r2, [pc, #288]	; (8001674 <HAL_GPIO_Init+0x2e8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d007      	beq.n	8001568 <HAL_GPIO_Init+0x1dc>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a47      	ldr	r2, [pc, #284]	; (8001678 <HAL_GPIO_Init+0x2ec>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d101      	bne.n	8001564 <HAL_GPIO_Init+0x1d8>
 8001560:	2302      	movs	r3, #2
 8001562:	e004      	b.n	800156e <HAL_GPIO_Init+0x1e2>
 8001564:	2303      	movs	r3, #3
 8001566:	e002      	b.n	800156e <HAL_GPIO_Init+0x1e2>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <HAL_GPIO_Init+0x1e2>
 800156c:	2300      	movs	r3, #0
 800156e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001570:	f002 0203 	and.w	r2, r2, #3
 8001574:	0092      	lsls	r2, r2, #2
 8001576:	4093      	lsls	r3, r2
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	4313      	orrs	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800157e:	493b      	ldr	r1, [pc, #236]	; (800166c <HAL_GPIO_Init+0x2e0>)
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3302      	adds	r3, #2
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001598:	4b38      	ldr	r3, [pc, #224]	; (800167c <HAL_GPIO_Init+0x2f0>)
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	4937      	ldr	r1, [pc, #220]	; (800167c <HAL_GPIO_Init+0x2f0>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015a6:	4b35      	ldr	r3, [pc, #212]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	4933      	ldr	r1, [pc, #204]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d006      	beq.n	80015ce <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015c0:	4b2e      	ldr	r3, [pc, #184]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	492d      	ldr	r1, [pc, #180]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	60cb      	str	r3, [r1, #12]
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015ce:	4b2b      	ldr	r3, [pc, #172]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	4929      	ldr	r1, [pc, #164]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015d8:	4013      	ands	r3, r2
 80015da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015e8:	4b24      	ldr	r3, [pc, #144]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4923      	ldr	r1, [pc, #140]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	491f      	ldr	r1, [pc, #124]	; (800167c <HAL_GPIO_Init+0x2f0>)
 8001600:	4013      	ands	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <HAL_GPIO_Init+0x2f0>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4919      	ldr	r1, [pc, #100]	; (800167c <HAL_GPIO_Init+0x2f0>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	600b      	str	r3, [r1, #0]
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_GPIO_Init+0x2f0>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	43db      	mvns	r3, r3
 8001626:	4915      	ldr	r1, [pc, #84]	; (800167c <HAL_GPIO_Init+0x2f0>)
 8001628:	4013      	ands	r3, r2
 800162a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	3301      	adds	r3, #1
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	fa22 f303 	lsr.w	r3, r2, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	f47f aeaf 	bne.w	80013a0 <HAL_GPIO_Init+0x14>
  }
}
 8001642:	bf00      	nop
 8001644:	bf00      	nop
 8001646:	372c      	adds	r7, #44	; 0x2c
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	10320000 	.word	0x10320000
 8001654:	10310000 	.word	0x10310000
 8001658:	10220000 	.word	0x10220000
 800165c:	10210000 	.word	0x10210000
 8001660:	10120000 	.word	0x10120000
 8001664:	10110000 	.word	0x10110000
 8001668:	40021000 	.word	0x40021000
 800166c:	40010000 	.word	0x40010000
 8001670:	40010800 	.word	0x40010800
 8001674:	40010c00 	.word	0x40010c00
 8001678:	40011000 	.word	0x40011000
 800167c:	40010400 	.word	0x40010400

08001680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
 800168c:	4613      	mov	r3, r2
 800168e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001690:	787b      	ldrb	r3, [r7, #1]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001696:	887a      	ldrh	r2, [r7, #2]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800169c:	e003      	b.n	80016a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800169e:	887b      	ldrh	r3, [r7, #2]
 80016a0:	041a      	lsls	r2, r3, #16
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	611a      	str	r2, [r3, #16]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e26c      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 8087 	beq.w	80017de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d0:	4b92      	ldr	r3, [pc, #584]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d00c      	beq.n	80016f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016dc:	4b8f      	ldr	r3, [pc, #572]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d112      	bne.n	800170e <HAL_RCC_OscConfig+0x5e>
 80016e8:	4b8c      	ldr	r3, [pc, #560]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f4:	d10b      	bne.n	800170e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f6:	4b89      	ldr	r3, [pc, #548]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d06c      	beq.n	80017dc <HAL_RCC_OscConfig+0x12c>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d168      	bne.n	80017dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e246      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001716:	d106      	bne.n	8001726 <HAL_RCC_OscConfig+0x76>
 8001718:	4b80      	ldr	r3, [pc, #512]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a7f      	ldr	r2, [pc, #508]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800171e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	e02e      	b.n	8001784 <HAL_RCC_OscConfig+0xd4>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0x98>
 800172e:	4b7b      	ldr	r3, [pc, #492]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a7a      	ldr	r2, [pc, #488]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b78      	ldr	r3, [pc, #480]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a77      	ldr	r2, [pc, #476]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e01d      	b.n	8001784 <HAL_RCC_OscConfig+0xd4>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001750:	d10c      	bne.n	800176c <HAL_RCC_OscConfig+0xbc>
 8001752:	4b72      	ldr	r3, [pc, #456]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a71      	ldr	r2, [pc, #452]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	4b6f      	ldr	r3, [pc, #444]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a6e      	ldr	r2, [pc, #440]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e00b      	b.n	8001784 <HAL_RCC_OscConfig+0xd4>
 800176c:	4b6b      	ldr	r3, [pc, #428]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a6a      	ldr	r2, [pc, #424]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b68      	ldr	r3, [pc, #416]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a67      	ldr	r2, [pc, #412]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800177e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001782:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff fcec 	bl	8001168 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001794:	f7ff fce8 	bl	8001168 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	; 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e1fa      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	4b5d      	ldr	r3, [pc, #372]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0xe4>
 80017b2:	e014      	b.n	80017de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fcd8 	bl	8001168 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017bc:	f7ff fcd4 	bl	8001168 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e1e6      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ce:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x10c>
 80017da:	e000      	b.n	80017de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d063      	beq.n	80018b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ea:	4b4c      	ldr	r3, [pc, #304]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00b      	beq.n	800180e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017f6:	4b49      	ldr	r3, [pc, #292]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d11c      	bne.n	800183c <HAL_RCC_OscConfig+0x18c>
 8001802:	4b46      	ldr	r3, [pc, #280]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d116      	bne.n	800183c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	4b43      	ldr	r3, [pc, #268]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <HAL_RCC_OscConfig+0x176>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d001      	beq.n	8001826 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e1ba      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001826:	4b3d      	ldr	r3, [pc, #244]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4939      	ldr	r1, [pc, #228]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183a:	e03a      	b.n	80018b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d020      	beq.n	8001886 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001844:	4b36      	ldr	r3, [pc, #216]	; (8001920 <HAL_RCC_OscConfig+0x270>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff fc8d 	bl	8001168 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001852:	f7ff fc89 	bl	8001168 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e19b      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4927      	ldr	r1, [pc, #156]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001880:	4313      	orrs	r3, r2
 8001882:	600b      	str	r3, [r1, #0]
 8001884:	e015      	b.n	80018b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_RCC_OscConfig+0x270>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fc6c 	bl	8001168 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001894:	f7ff fc68 	bl	8001168 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e17a      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d03a      	beq.n	8001934 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d019      	beq.n	80018fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <HAL_RCC_OscConfig+0x274>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018cc:	f7ff fc4c 	bl	8001168 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d4:	f7ff fc48 	bl	8001168 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e15a      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018f2:	2001      	movs	r0, #1
 80018f4:	f000 fa9a 	bl	8001e2c <RCC_Delay>
 80018f8:	e01c      	b.n	8001934 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_RCC_OscConfig+0x274>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001900:	f7ff fc32 	bl	8001168 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001906:	e00f      	b.n	8001928 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001908:	f7ff fc2e 	bl	8001168 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d908      	bls.n	8001928 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e140      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	42420000 	.word	0x42420000
 8001924:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001928:	4b9e      	ldr	r3, [pc, #632]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1e9      	bne.n	8001908 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80a6 	beq.w	8001a8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001946:	4b97      	ldr	r3, [pc, #604]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10d      	bne.n	800196e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	4b94      	ldr	r3, [pc, #592]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	4a93      	ldr	r2, [pc, #588]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195c:	61d3      	str	r3, [r2, #28]
 800195e:	4b91      	ldr	r3, [pc, #580]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800196a:	2301      	movs	r3, #1
 800196c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196e:	4b8e      	ldr	r3, [pc, #568]	; (8001ba8 <HAL_RCC_OscConfig+0x4f8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d118      	bne.n	80019ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197a:	4b8b      	ldr	r3, [pc, #556]	; (8001ba8 <HAL_RCC_OscConfig+0x4f8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a8a      	ldr	r2, [pc, #552]	; (8001ba8 <HAL_RCC_OscConfig+0x4f8>)
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001986:	f7ff fbef 	bl	8001168 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198e:	f7ff fbeb 	bl	8001168 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b64      	cmp	r3, #100	; 0x64
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e0fd      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a0:	4b81      	ldr	r3, [pc, #516]	; (8001ba8 <HAL_RCC_OscConfig+0x4f8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x312>
 80019b4:	4b7b      	ldr	r3, [pc, #492]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4a7a      	ldr	r2, [pc, #488]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6213      	str	r3, [r2, #32]
 80019c0:	e02d      	b.n	8001a1e <HAL_RCC_OscConfig+0x36e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x334>
 80019ca:	4b76      	ldr	r3, [pc, #472]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4a75      	ldr	r2, [pc, #468]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	6213      	str	r3, [r2, #32]
 80019d6:	4b73      	ldr	r3, [pc, #460]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4a72      	ldr	r2, [pc, #456]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	f023 0304 	bic.w	r3, r3, #4
 80019e0:	6213      	str	r3, [r2, #32]
 80019e2:	e01c      	b.n	8001a1e <HAL_RCC_OscConfig+0x36e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b05      	cmp	r3, #5
 80019ea:	d10c      	bne.n	8001a06 <HAL_RCC_OscConfig+0x356>
 80019ec:	4b6d      	ldr	r3, [pc, #436]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	4a6c      	ldr	r2, [pc, #432]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	6213      	str	r3, [r2, #32]
 80019f8:	4b6a      	ldr	r3, [pc, #424]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4a69      	ldr	r2, [pc, #420]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6213      	str	r3, [r2, #32]
 8001a04:	e00b      	b.n	8001a1e <HAL_RCC_OscConfig+0x36e>
 8001a06:	4b67      	ldr	r3, [pc, #412]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4a66      	ldr	r2, [pc, #408]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	6213      	str	r3, [r2, #32]
 8001a12:	4b64      	ldr	r3, [pc, #400]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a63      	ldr	r2, [pc, #396]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	f023 0304 	bic.w	r3, r3, #4
 8001a1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d015      	beq.n	8001a52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7ff fb9f 	bl	8001168 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff fb9b 	bl	8001168 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e0ab      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a44:	4b57      	ldr	r3, [pc, #348]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0ee      	beq.n	8001a2e <HAL_RCC_OscConfig+0x37e>
 8001a50:	e014      	b.n	8001a7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a52:	f7ff fb89 	bl	8001168 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a58:	e00a      	b.n	8001a70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f7ff fb85 	bl	8001168 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e095      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a70:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1ee      	bne.n	8001a5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d105      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a82:	4b48      	ldr	r3, [pc, #288]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4a47      	ldr	r2, [pc, #284]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8081 	beq.w	8001b9a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a98:	4b42      	ldr	r3, [pc, #264]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d061      	beq.n	8001b68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d146      	bne.n	8001b3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aac:	4b3f      	ldr	r3, [pc, #252]	; (8001bac <HAL_RCC_OscConfig+0x4fc>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fb59 	bl	8001168 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aba:	f7ff fb55 	bl	8001168 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e067      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001acc:	4b35      	ldr	r3, [pc, #212]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1f0      	bne.n	8001aba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae0:	d108      	bne.n	8001af4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ae2:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	492d      	ldr	r1, [pc, #180]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af4:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a19      	ldr	r1, [r3, #32]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	430b      	orrs	r3, r1
 8001b06:	4927      	ldr	r1, [pc, #156]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0c:	4b27      	ldr	r3, [pc, #156]	; (8001bac <HAL_RCC_OscConfig+0x4fc>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff fb29 	bl	8001168 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff fb25 	bl	8001168 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e037      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x46a>
 8001b38:	e02f      	b.n	8001b9a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HAL_RCC_OscConfig+0x4fc>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fb12 	bl	8001168 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff fb0e 	bl	8001168 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e020      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x498>
 8001b66:	e018      	b.n	8001b9a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e013      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_OscConfig+0x4f4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d001      	beq.n	8001b9a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	42420060 	.word	0x42420060

08001bb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0d0      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b6a      	ldr	r3, [pc, #424]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d910      	bls.n	8001bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b67      	ldr	r3, [pc, #412]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 0207 	bic.w	r2, r3, #7
 8001bda:	4965      	ldr	r1, [pc, #404]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	4b63      	ldr	r3, [pc, #396]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0b8      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d020      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c0c:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4a58      	ldr	r2, [pc, #352]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c24:	4b53      	ldr	r3, [pc, #332]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4a52      	ldr	r2, [pc, #328]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c30:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	494d      	ldr	r1, [pc, #308]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d040      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	4b47      	ldr	r3, [pc, #284]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d115      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e07f      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6e:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e073      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e06b      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8e:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f023 0203 	bic.w	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4936      	ldr	r1, [pc, #216]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca0:	f7ff fa62 	bl	8001168 <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca8:	f7ff fa5e 	bl	8001168 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e053      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 020c 	and.w	r2, r3, #12
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d1eb      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d210      	bcs.n	8001d00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 0207 	bic.w	r2, r3, #7
 8001ce6:	4922      	ldr	r1, [pc, #136]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e032      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	4916      	ldr	r1, [pc, #88]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d009      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	490e      	ldr	r1, [pc, #56]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d3e:	f000 f821 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8001d42:	4602      	mov	r2, r0
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	490a      	ldr	r1, [pc, #40]	; (8001d78 <HAL_RCC_ClockConfig+0x1c8>)
 8001d50:	5ccb      	ldrb	r3, [r1, r3]
 8001d52:	fa22 f303 	lsr.w	r3, r2, r3
 8001d56:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <HAL_RCC_ClockConfig+0x1cc>)
 8001d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_RCC_ClockConfig+0x1d0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff f9c0 	bl	80010e4 <HAL_InitTick>

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40022000 	.word	0x40022000
 8001d74:	40021000 	.word	0x40021000
 8001d78:	08001ed8 	.word	0x08001ed8
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	20000004 	.word	0x20000004

08001d84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d002      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x30>
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d003      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x36>
 8001db2:	e027      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001db6:	613b      	str	r3, [r7, #16]
      break;
 8001db8:	e027      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	0c9b      	lsrs	r3, r3, #18
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dc4:	5cd3      	ldrb	r3, [r2, r3]
 8001dc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d010      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	0c5b      	lsrs	r3, r3, #17
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001de6:	fb02 f203 	mul.w	r2, r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	e004      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001df8:	fb02 f303 	mul.w	r3, r2, r3
 8001dfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	613b      	str	r3, [r7, #16]
      break;
 8001e02:	e002      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e06:	613b      	str	r3, [r7, #16]
      break;
 8001e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e0a:	693b      	ldr	r3, [r7, #16]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	007a1200 	.word	0x007a1200
 8001e20:	08001ee8 	.word	0x08001ee8
 8001e24:	08001ef8 	.word	0x08001ef8
 8001e28:	003d0900 	.word	0x003d0900

08001e2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <RCC_Delay+0x34>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <RCC_Delay+0x38>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	0a5b      	lsrs	r3, r3, #9
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e48:	bf00      	nop
  }
  while (Delay --);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1e5a      	subs	r2, r3, #1
 8001e4e:	60fa      	str	r2, [r7, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f9      	bne.n	8001e48 <RCC_Delay+0x1c>
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	20000000 	.word	0x20000000
 8001e64:	10624dd3 	.word	0x10624dd3

08001e68 <__libc_init_array>:
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	2600      	movs	r6, #0
 8001e6c:	4d0c      	ldr	r5, [pc, #48]	; (8001ea0 <__libc_init_array+0x38>)
 8001e6e:	4c0d      	ldr	r4, [pc, #52]	; (8001ea4 <__libc_init_array+0x3c>)
 8001e70:	1b64      	subs	r4, r4, r5
 8001e72:	10a4      	asrs	r4, r4, #2
 8001e74:	42a6      	cmp	r6, r4
 8001e76:	d109      	bne.n	8001e8c <__libc_init_array+0x24>
 8001e78:	f000 f822 	bl	8001ec0 <_init>
 8001e7c:	2600      	movs	r6, #0
 8001e7e:	4d0a      	ldr	r5, [pc, #40]	; (8001ea8 <__libc_init_array+0x40>)
 8001e80:	4c0a      	ldr	r4, [pc, #40]	; (8001eac <__libc_init_array+0x44>)
 8001e82:	1b64      	subs	r4, r4, r5
 8001e84:	10a4      	asrs	r4, r4, #2
 8001e86:	42a6      	cmp	r6, r4
 8001e88:	d105      	bne.n	8001e96 <__libc_init_array+0x2e>
 8001e8a:	bd70      	pop	{r4, r5, r6, pc}
 8001e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e90:	4798      	blx	r3
 8001e92:	3601      	adds	r6, #1
 8001e94:	e7ee      	b.n	8001e74 <__libc_init_array+0xc>
 8001e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e9a:	4798      	blx	r3
 8001e9c:	3601      	adds	r6, #1
 8001e9e:	e7f2      	b.n	8001e86 <__libc_init_array+0x1e>
 8001ea0:	08001efc 	.word	0x08001efc
 8001ea4:	08001efc 	.word	0x08001efc
 8001ea8:	08001efc 	.word	0x08001efc
 8001eac:	08001f00 	.word	0x08001f00

08001eb0 <memset>:
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4402      	add	r2, r0
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d100      	bne.n	8001eba <memset+0xa>
 8001eb8:	4770      	bx	lr
 8001eba:	f803 1b01 	strb.w	r1, [r3], #1
 8001ebe:	e7f9      	b.n	8001eb4 <memset+0x4>

08001ec0 <_init>:
 8001ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec2:	bf00      	nop
 8001ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ec6:	bc08      	pop	{r3}
 8001ec8:	469e      	mov	lr, r3
 8001eca:	4770      	bx	lr

08001ecc <_fini>:
 8001ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ece:	bf00      	nop
 8001ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ed2:	bc08      	pop	{r3}
 8001ed4:	469e      	mov	lr, r3
 8001ed6:	4770      	bx	lr
